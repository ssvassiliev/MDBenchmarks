# Generated by Django 3.2.7 on 2021-10-08 12:45

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Benchmark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a benchmark name', max_length=100)),
                ('natoms', models.IntegerField()),
                ('description', models.TextField()),
            ],
            options={
                'verbose_name_plural': '1. Test Systems',
            },
        ),
        migrations.CreateModel(
            name='CPU',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a CPU name (e.g. Xeon)', max_length=100)),
                ('model', models.CharField(help_text='Enter a CPU model (e.g. E5-2683 v4)', max_length=100)),
                ('codename', models.CharField(help_text='Enter a CPU codename (e.g. Broadwell)', max_length=100)),
                ('frequency', models.FloatField()),
            ],
            options={
                'verbose_name_plural': '6. CPU Types',
            },
        ),
        migrations.CreateModel(
            name='GPU',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a GPU name (e.g. Tesla)', max_length=100)),
                ('model', models.CharField(help_text='Enter a GPU model (e.g. V100)', max_length=100)),
            ],
            options={
                'verbose_name_plural': '7. GPU Types',
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ncpu', models.IntegerField()),
                ('ntasks', models.IntegerField()),
                ('ngpu', models.IntegerField()),
                ('nvlink', models.BooleanField()),
            ],
            options={
                'verbose_name_plural': '5. Computing Resources',
            },
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a site name (e.g. Cedar)', max_length=100)),
            ],
            options={
                'verbose_name_plural': '8. CC Sites',
            },
        ),
        migrations.CreateModel(
            name='Software',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a software name (e.g. NAMD)', max_length=100)),
                ('module', models.CharField(help_text='Enter a module name', max_length=100)),
                ('module_version', models.CharField(help_text='Enter a module version', max_length=100)),
                ('toolchain', models.CharField(help_text='Enter a toolchain name', max_length=100)),
                ('toolchain_version', models.CharField(help_text='Enter a toolchain version', max_length=100)),
                ('instruction_set', models.CharField(help_text='Enter CPU instruction set (avx2/avx512)', max_length=100)),
                ('submission', models.TextField()),
            ],
            options={
                'verbose_name_plural': '2. MD Engines',
            },
        ),
        migrations.CreateModel(
            name='SerialBenchmarkInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rate_min', models.FloatField(help_text='Simulation speed, ns/day')),
                ('rate_max', models.FloatField(help_text='Simulation speed, ns/day')),
                ('benchmark', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='mdbench.benchmark')),
                ('cpu', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='mdbench.cpu')),
                ('gpu', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='mdbench.gpu')),
                ('site', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='mdbench.site')),
                ('software', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='mdbench.software')),
            ],
            options={
                'verbose_name_plural': '3. Serial Benchmarks',
            },
        ),
        migrations.CreateModel(
            name='BenchmarkInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rate_min', models.FloatField(help_text='Simulation speed, ns/day')),
                ('rate_max', models.FloatField(help_text='Simulation speed, ns/day')),
                ('efficiency', models.FloatField(help_text='CPU efficiency, %')),
                ('benchmark', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='mdbench.benchmark')),
                ('cpu', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='mdbench.cpu')),
                ('gpu', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='mdbench.gpu')),
                ('resource', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='mdbench.resource')),
                ('serial', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='mdbench.serialbenchmarkinstance')),
                ('site', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='mdbench.site')),
                ('software', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='mdbench.software')),
            ],
            options={
                'verbose_name_plural': '4. Parallel Benchmarks',
            },
        ),
    ]
