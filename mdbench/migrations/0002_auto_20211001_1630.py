# Generated by Django 3.2.7 on 2021-10-01 16:30

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('mdbench', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Benchmark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a software name (e.g. NAMD)', max_length=100)),
                ('natoms', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='BenchmarkInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rate', models.FloatField()),
                ('efficiency', models.FloatField()),
                ('benchmark', models.ForeignKey(null=True, on_delete=django.db.models.deletion.RESTRICT, to='mdbench.benchmark')),
            ],
        ),
        migrations.CreateModel(
            name='CPU',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a CPU name (e.g. Xeon)', max_length=100)),
                ('model', models.CharField(help_text='Enter a CPU model (e.g. E5-2683 v4)', max_length=100)),
                ('codename', models.CharField(help_text='Enter a CPU codename (e.g. Broadwell)', max_length=100)),
                ('frequency', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='GPU',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a GPU name (e.g. Tesla)', max_length=100)),
                ('model', models.CharField(help_text='Enter a GPU model (e.g. V100)', max_length=100)),
                ('nvlink', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='Parameters',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ncpu', models.IntegerField()),
                ('ntasks', models.IntegerField()),
                ('ngpu', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Software',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Enter a software name (e.g. NAMD)', max_length=100)),
                ('module', models.CharField(help_text='Enter a module name', max_length=100)),
                ('module_version', models.CharField(help_text='Enter a module version', max_length=100)),
                ('toolchain', models.CharField(help_text='Enter a toolchain version', max_length=100)),
                ('instruction_set', models.CharField(help_text='Enter CPU instruction set (avx2/avx512)', max_length=100)),
            ],
        ),
        migrations.DeleteModel(
            name='Choice',
        ),
        migrations.DeleteModel(
            name='Question',
        ),
        migrations.AddField(
            model_name='benchmarkinstance',
            name='cpu',
            field=models.ManyToManyField(help_text='Select a CPU for this benchmark', to='mdbench.CPU'),
        ),
        migrations.AddField(
            model_name='benchmarkinstance',
            name='gpu',
            field=models.ManyToManyField(help_text='Select a CPU for this benchmark', to='mdbench.GPU'),
        ),
        migrations.AddField(
            model_name='benchmarkinstance',
            name='parameters',
            field=models.ManyToManyField(to='mdbench.Parameters'),
        ),
        migrations.AddField(
            model_name='benchmarkinstance',
            name='software',
            field=models.ManyToManyField(help_text='Select a software for this benchmark', to='mdbench.Software'),
        ),
    ]
